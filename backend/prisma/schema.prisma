// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  directUrl = env("DIRECT_URL")
  url       = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  MEMBER
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum TeamType {
  PUBLIC
  PRIVATE
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Teams relationships
  ownedTeams  Team[]       @relation("TeamOwner")
  teamMembers TeamMember[]

  // Tasks relationships
  createdTasks  Task[] @relation("TaskCreator")
  assignedTasks Task[] @relation("TaskAssignee")

  @@map("users")
}

model Team {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        TeamType @default(PUBLIC)
  joinCode    String?  @unique // For private teams
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Owner relationship
  ownerId String
  owner   User   @relation("TeamOwner", fields: [ownerId], references: [id], onDelete: Cascade)

  // Members relationship
  members TeamMember[]
  tasks   Task[]

  @@map("teams")
}

model TeamMember {
  id        String   @id @default(cuid())
  role      UserRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt

  // User relationship
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Team relationship
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([userId, teamId])
  @@map("team_members")
}

model Task {
  id          String       @id @default(cuid())
  title       String
  description String?
  priority    TaskPriority @default(MEDIUM)
  status      TaskStatus   @default(TODO)
  order       Int          @default(0)
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Team relationship
  teamId String
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  // Creator relationship
  creatorId String
  creator   User   @relation("TaskCreator", fields: [creatorId], references: [id], onDelete: Cascade)

  // Assignee relationship (optional)
  assigneeId String?
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("tasks")
}
