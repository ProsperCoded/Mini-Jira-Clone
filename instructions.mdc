---
description:
globs:
alwaysApply: false
---
# Mini Jira Clone - Development Instructions

## üé® Design System & Color Scheme

### Primary Color Palette
Our application uses a **Blue-to-Green gradient** as the primary color scheme throughout the interface:

- **Primary Blue**: `blue-600` (#2563eb) - Main brand color
- **Primary Green**: `green-600` (#16a34a) - Accent and completion color
- **Gradient Applications**:
  - Buttons: `bg-gradient-to-r from-blue-600 to-green-600`
  - Hover states: `hover:from-blue-700 hover:to-green-700`
  - Text gradients: `bg-gradient-to-r from-blue-600 to-green-600 bg-clip-text text-transparent`
  - Background overlays: `bg-gradient-to-br from-blue-500/5 to-green-500/5`
  - Avatar fallbacks: `bg-gradient-to-r from-blue-600 to-green-600`

### Design Principles
- **Modern & Clean**: Utilize glass-morphism effects with backdrop-blur
- **Responsive Design**: Mobile-first approach with excellent UX on all devices
- **Dark/Light Mode**: Full support for both themes
- **Micro-interactions**: Framer Motion animations for enhanced user experience
- **Accessibility**: WCAG compliant color contrasts and interactive elements

## üõ† Development Guidelines

### Frontend Technology Stack
- **Framework**: React 19 with TypeScript
- **Styling**: Tailwind CSS 4.x with shadcn/ui components
- **Animations**: Framer Motion for smooth transitions
- **Icons**: Lucide React for consistent iconography
- **HTTP Client**: Axios with custom interceptors
- **State Management**: React Context API for auth and global state

### Package Management
- **Package Manager**: pnpm (preferred)
- **Installing shadcn components**: `pnpm dlx shadcn@latest add [component-name]`

### Component Architecture
- **UI Components**: Located in `src/components/ui/` (shadcn-based)
- **Feature Components**: Organized by feature in `src/components/[feature]/`
- **Shared Components**: Reusable components in `src/components/shared/`
- **Custom Hooks**: Located in `src/hooks/`

### Authentication System
- **JWT Tokens**: Stored in HTTP-only cookies for security
- **Token Management**: Automatic injection via axios interceptors
- **Auth Context**: Global authentication state management
- **Modal System**: Reusable authentication modals with context-based control

### API Integration
- **Base URL**: `http://localhost:3001`
- **API Client**: Custom axios instance with interceptors
- **Error Handling**: Centralized error management with user-friendly messages
- **Type Safety**: Full TypeScript interfaces for all API responses

## üéØ UI/UX Standards

### Component Guidelines
- **Consistent Spacing**: Use Tailwind's spacing scale (4, 6, 8, 12, etc.)
- **Border Radius**: Standard radius of `rounded-lg` (0.5rem)
- **Shadows**: Use `shadow-lg` for elevated components
- **Transitions**: All interactive elements should have smooth transitions
- **Loading States**: Implement loading spinners and skeleton states

### Animation Standards
- **Entry Animations**: Staggered animations with framer-motion
- **Hover Effects**: Subtle scale and color transitions
- **Modal Animations**: Smooth scale and fade transitions
- **Page Transitions**: Consistent entrance/exit animations

### Form Design
- **Input Fields**: 
  - Height: `h-10` or `h-12` for primary forms
  - Background: `bg-background/50` with transparency
  - Focus states: Blue ring with proper contrast
  - Icons: Left-aligned with proper spacing
- **Buttons**:
  - Primary: Blue-green gradient with hover effects
  - Secondary: Ghost variant with proper contrast
  - Loading: Spinner with descriptive text

## üèó Backend Guidelines

### File Structure
- **Naming Convention**: `[name].[purpose].ts` (e.g., `user.service.ts`, `auth.types.ts`)
- **Services**: Business logic in `src/modules/[module]/[name].service.ts`
- **Types**: TypeScript interfaces in `src/types/[name].types.ts`
- **Utilities**: Helper functions in `src/utils/[name].util.ts`
- **Validation**: class-validator and class-transformer for request validation

### API Documentation
- **Documentation**: Create `.md` files for all major backend features
- **Location**: Root level or `docs/` directory
- **Format**: Comprehensive API documentation with examples
- **Updates**: Keep documentation synchronized with code changes

## üöÄ Development Workflow

### Code Quality
- **TypeScript**: Strict mode enabled for type safety
- **ESLint**: Consistent code formatting and best practices
- **Component Props**: Always define interfaces for component props
- **Error Boundaries**: Implement proper error handling

### Performance Optimization
- **Lazy Loading**: Code splitting for route components
- **Image Optimization**: Use appropriate formats and sizes
- **Bundle Analysis**: Regular bundle size monitoring
- **Caching**: Implement proper caching strategies

### Testing Strategy
- **Unit Tests**: For utility functions and hooks
- **Component Tests**: For complex interactive components
- **Integration Tests**: For critical user flows
- **E2E Tests**: For complete user journeys

## üîß Environment Setup

### Development Environment
- **Node.js**: Version 18+ recommended
- **Package Manager**: pnpm for faster installs
- **VS Code Extensions**: 
  - Tailwind CSS IntelliSense
  - TypeScript Importer
  - ES7+ React/Redux/React-Native snippets

### Deployment Considerations
- **Environment Variables**: Proper handling for different environments
- **Build Optimization**: Production-ready builds with proper minification
- **Security**: HTTPS, secure headers, and proper CORS configuration

## üì± Responsive Design Guidelines

### Breakpoints
- **Mobile**: Default (below 768px)
- **Tablet**: `md:` prefix (768px+)
- **Desktop**: `lg:` prefix (1024px+)
- **Large Desktop**: `xl:` prefix (1280px+)

### Mobile-First Approach
- Design for mobile first, then enhance for larger screens
- Touch-friendly interactive elements (minimum 44px)
- Readable font sizes and proper contrast ratios
- Optimized images and fast loading times

## üé® Magic UI & 21st Dev Integration

### Component Enhancement
- Leverage Magic UI components for advanced effects
- Use 21st.dev for inspiration and modern component patterns
- Customize components to match our blue-green brand colors
- Maintain consistency across all custom implementations

### Special Effects Usage
- **Particles**: For background enhancement
- **Animated Beams**: For connection visualizations
- **Gradient Cards**: For feature highlights
- **Text Animations**: For attention-grabbing headings

---

*This document serves as the single source of truth for development standards and should be updated as the project evolves.*
